#!/usr/bin/env node

var program = require('commander')
  , async = require('async')
  , fs = require('fs')
  , resolve = require('path').resolve
  , defaults = require('../lib/defaults')
  , writeTo = require('../lib/util').writeTo
  , JscatEvent = require('../lib/jscat-event')
  , jscat = new JscatEvent(defaults)
  ;

// jscat *.js --flag development
program
  .version('0.0.0')
  .usage('[options] [dir|file ...]')
  //.option('-O, --option <path>', 'specify js-concat option path')
  .option('-o, --out <path>', 'excute writeFile to given path')
  //.option('-n, --no-option', 'excute with no option')
  .option('-n, --namespace <namespace>', 'add custom namespace')
  .option('-v --verbose', 'verbose logging')
  //.option('-j, --join <string>', 'cat files joinging with given string')
  //.option('--each <js-path>', 'excute javascript to each file')
  //.option('-bw, --beforewrite <js-path>', 'excute javascript ')
  //.option('--bs', '')
  ;

program.parse(process.argv);

var log = program.verbose
        ? console.error
        : function () {};

var filePaths = program.args;
if (!filePaths.length) {
  console.log(program.helpInformation());
  program.emit('--help');
  process.exit(0);
}

var ns = program.namespace;
// add namespace
if (ns) jscat.namespace(ns);

async.waterfall([
  // make sure file is not a directory
  function (next) {
    async.filter(filePaths, function (filePath, callback) {
      var stats = fs.lstatSync(filePath);
      return callback(stats.isFile());
    }, next.bind(null, null));// bind context null with error null
  }
  // fire "read" event
, function (paths, next) {
    async.map(paths, function (filePath, callback) {
      jscat.fireRead(filePath, callback);
    }, next);
  }
  // fire "each" event
, function (fileObjs, next) {
    async.map(fileObjs, function (fileObj, callback) {
      jscat.fireEach(fileObj, callback);
    }, next);
  }
  // fire "join" event
, function (results, next) {
    jscat.fireJoin(results, next);
  }
  // if no output, log and exit
  // if output, excute writeFile
], function (err, result) {
  if (err) throw err;

  if (!program.out) {
    console.log(result);
    process.exit(0);
  } else {
    var outPath = resolve(program.out);
    writeTo(outPath, result, function (err) {
      if (err) throw err;
      log(filePaths.join(',') + ' > ' + outPath);
    });
  }
});
